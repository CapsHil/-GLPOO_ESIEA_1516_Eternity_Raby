package org.esiea.glpoo.eternity.map;

import java.awt.Dimension;
import java.awt.Toolkit;

import org.esiea.glpoo.eternity.combat.JoueurReel;
import org.esiea.glpoo.eternity.combat.LanceurCombat;
import org.esiea.glpoo.eternity.combat.TypeCombatEnum;
import org.newdawn.slick.Animation;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;
import org.newdawn.slick.Music;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.SpriteSheet;
import org.newdawn.slick.tiled.TiledMap;

public class Window extends BasicGame {
	
	GameContainer container;
	TiledMap map;
	private float x = 960, y = 1050;
	private float xCamera = x, yCamera = y;
	private int direction = 0;
	private boolean moving = false;
	private Animation[] animations = new Animation[8];
	JoueurReel player;
	
    public Window() {
        super("Eternity");
    }

    @Override
    public void init(GameContainer container) throws SlickException {
        this.container = container;
       
        player = new JoueurReel("FDP", 1000);
        this.map = new TiledMap("map/map.tmx");
        SpriteSheet spriteSheet = new SpriteSheet("map/sprites/character.png", 64, 64);
        this.animations[0] = loadAnimation(spriteSheet, 0, 1, 0);
        this.animations[1] = loadAnimation(spriteSheet, 0, 1, 1);
        this.animations[2] = loadAnimation(spriteSheet, 0, 1, 2);
        this.animations[3] = loadAnimation(spriteSheet, 0, 1, 3);
        this.animations[4] = loadAnimation(spriteSheet, 1, 9, 0);
        this.animations[5] = loadAnimation(spriteSheet, 1, 9, 1);
        this.animations[6] = loadAnimation(spriteSheet, 1, 9, 2);
        this.animations[7] = loadAnimation(spriteSheet, 1, 9, 3);
//        Music background = new Music("map/son_de_ouf.ogg");
//        background.loop();
    }

    private Animation loadAnimation(SpriteSheet spriteSheet, int startX, int endX, int y) {
        Animation animation = new Animation();
        for (int x = startX; x < endX; x++) {
            animation.addFrame(spriteSheet.getSprite(x, y), 100);
        }
        return animation;
    }
    @Override
    public void render(GameContainer container, Graphics g) throws SlickException {
    	g.translate(container.getWidth() / 2 - (int) this.xCamera, 
                container.getHeight() / 2 - (int) this.yCamera);
        this.map.render(0, 0);
        g.setColor(new Color(0, 0, 0, .5f));
        g.fillOval(x - 16, y - 8, 32, 16);
        g.drawAnimation(animations[direction + (moving ? 4 : 0)], x-32, y-60);
    }
    
    @Override
    public void update(GameContainer container, int delta) throws SlickException {
    	for (int objectID = 0; objectID < map.getObjectCount(0); objectID++) {
            if (x > map.getObjectX(0, objectID)
                    && x < map.getObjectX(0, objectID) + map.getObjectWidth(0, objectID)
                    && y > map.getObjectY(0, objectID)
                    && y < map.getObjectY(0, objectID) + map.getObjectHeight(0, objectID)) {
                if ("combat2".equals(map.getObjectType(0, objectID))) {
                    LanceurCombat.launchFight(player, TypeCombatEnum.PariSur2PNJ);
                }
                else if ("combat".equals(map.getObjectType(0, objectID))) {
                    LanceurCombat.launchFight(player, TypeCombatEnum.ReelVsPNJ);
                }
                else if ("libre".equals(map.getObjectType(0, objectID))) {
                    LanceurCombat.launchFight(player, TypeCombatEnum.Libre);
                } 
            }
         }
    	if (this.moving) {
            float futurX = this.x;
            float futurY = this.y;
            switch (this.direction) {
            case 0: futurY = this.y - .1f * delta; break;
            case 1: futurX = this.x - .1f * delta; break;
            case 2: futurY = this.y + .1f * delta; break;
            case 3: futurX = this.x + .1f * delta; break;
            }
            this.x = futurX;
            this.y = futurY;
            Image tile = this.map.getTileImage(
                    (int) futurX / this.map.getTileWidth(), 
                    (int) futurY / this.map.getTileHeight(), 
                    this.map.getLayerIndex("Mur"));
            boolean collision = tile != null;
            if (collision) {
                this.moving = false;
            } else {
                this.x = futurX;
                this.y = futurY;
            }
        }
        this.xCamera = this.x;
        this.yCamera = this.y;
    }

    @Override
    public void keyReleased(int key, char c) {
        if (Input.KEY_ESCAPE == key) {
            container.exit();
        }
        this.moving = false;
    }

    @Override
    public void keyPressed(int key, char c) {
        switch (key) {
            case Input.KEY_UP:    this.direction = 0; this.moving = true; break;
            case Input.KEY_LEFT:  this.direction = 1; this.moving = true; break;
            case Input.KEY_DOWN:  this.direction = 2; this.moving = true; break;
            case Input.KEY_RIGHT: this.direction = 3; this.moving = true; break;
        }
    }
    
    public static void main(String[] args) throws SlickException {
    	Dimension d = Toolkit.getDefaultToolkit().getScreenSize(); 
        new AppGameContainer(new Window(), d.width-100, d.height-100, false).start();
    }
}
